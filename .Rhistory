seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = c(
set_prior("cauchy(0, 1)", class = "sigma")
),
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m2_flat <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth + seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = c(
set_prior("cauchy(0, 1)", class = "sigma")
),
chains = chains,
iter = 5000,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m2_flat <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth + seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = c(
set_prior("cauchy(0, 1)", class = "sigma")
),
chains = 3,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
### Packages ###
library(here)
library(tidyverse)
library(brms)
library(DHARMa)
#remotes::install_github("Pakillo/DHARMa.helpers")
library(DHARMa.helpers)
library(bayesplot)
library(loo)
library(tidybayes)
library(patchwork)
library(emmeans)
### Start ###
rm(list = ls())
### Load data ###
sites <- read_csv(here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = col_factor(levels = c(
"hay_meadow", "dry_grassland"
)),
seed_density = "f",
exposition = col_factor(levels = c(
"north", "south"
)),
survey_year = "c"
)) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
load(file = here("outputs", "models", "model_fcs_simple.Rdata"))
load(file = here("outputs", "models", "model_fcs_full.Rdata"))
load(file = here("outputs", "models", "model_fcs_1.Rdata"))
load(file = here("outputs", "models", "model_fcs_2.Rdata"))
load(file = here("outputs", "models", "model_fcs_3.Rdata"))
prior_summary(m_2, all = FALSE)
m_1 <- m2
m_2 <- m_full
prior_summary(m_2, all = FALSE)
# Dike grassland field experiment
# Favourable conservation status ####
# Model check
# Markus Bauer
# 2022-11-15
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# A Preparation ###############################################################
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
### Packages ###
library(here)
library(tidyverse)
library(brms)
library(DHARMa)
#remotes::install_github("Pakillo/DHARMa.helpers")
library(DHARMa.helpers)
library(bayesplot)
library(loo)
library(tidybayes)
library(patchwork)
library(emmeans)
### Start ###
rm(list = ls())
### Load data ###
sites <- read_csv(here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = col_factor(levels = c(
"hay_meadow", "dry_grassland"
)),
seed_density = "f",
exposition = col_factor(levels = c(
"north", "south"
)),
survey_year = "c"
)) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
load(file = here("outputs", "models", "model_fcs_simple.Rdata"))
load(file = here("outputs", "models", "model_fcs_full.Rdata"))
load(file = here("outputs", "models", "model_fcs_1.Rdata"))
load(file = here("outputs", "models", "model_fcs_2.Rdata"))
load(file = here("outputs", "models", "model_fcs_3.Rdata"))
load(file = here("outputs", "models", "model_fcs_2_flat.Rdata"))
## 1 Model check ###############################################################
### a Model comparison ---------------------------------------------------------
m_1 <- m2
m_2 <- m_full
m_1$formula
m_2$formula
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
### b Model check -----------------------------------------------------------
#### * DHARMa ####
DHARMa.helpers::dh_check_brms(m_1, integer = TRUE)
DHARMa.helpers::dh_check_brms(m_2, integer = TRUE)
#### * Preparation ####
posterior1 <- m_1 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth15",
"b_target_typedry_grassland",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sigma"
)
)
posterior2 <- m_2 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth15",
"b_target_typedry_grassland",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sigma"
)
)
hmc_diagnostics1 <- nuts_params(m_1)
hmc_diagnostics2 <- nuts_params(m_2)
y <- sites$n
yrep1 <- posterior_predict(m_1, draws = 500)
yrep2 <- posterior_predict(m_2, draws = 500)
loo1 <- loo(m_1, save_psis = TRUE, moment_match = FALSE)
loo2 <- loo(m_2, save_psis = TRUE, moment_match = FALSE)
draws1 <- m_1 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
draws2 <- m_2 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
write.csv(draws2, here("outputs", "statistics", "table_fcs.csv"))
View(sites)
mean(sites$n)
mean(sites$n > 0) + mean(sites$n < 0)
0.95/2
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 1)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 10)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 5)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 2)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 1)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 3)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
# Dike grassland field experiment
# Favourable conservation status ####
# Model building
# Markus Bauer
# 2022-11-18
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# A Preparation ###############################################################
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
library(patchwork)
library(brms)
### Start ###
rm(list = ls())
### Load data ###
sites <- read_csv(
here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = col_factor(levels = c("hay_meadow", "dry_grassland")),
seed_density = "f",
exposition = col_factor(levels = c("north", "south")),
survey_year = "c"
)
) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# B Statistics #################################################################
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## 1 Data exploration ##########################################################
### a Graphs of raw data -------------------------------------------------------
plot1 <- ggplot(sites %>% filter(survey_year == 2021),
aes(y = n, x = sand_ratio)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Sand ratio [vol%]")
plot2 <- ggplot(sites %>% filter(survey_year == 2021),
aes(y = n, x = substrate_depth)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Substrate depth [cm]")
plot3 <- ggplot(sites %>% filter(survey_year == 2021),
aes(y = n, x = target_type)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Target type")
plot4 <- ggplot(sites %>% filter(survey_year == 2021),
aes(y = n, x = seed_density)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Seed density [g/m²]")
(plot1 + plot2) / (plot3 + plot4)
plot1 <- ggplot(sites %>% filter(survey_year == 2021),
aes(y = n, x = exposition)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Exposition")
plot2 <- ggplot(sites, aes(y = n, x = survey_year_fct)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
labs(title = "Survey year")
plot3 <- ggplot(sites %>% filter(survey_year == 2021), aes(y = n, x = site)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
facet_grid(~ survey_year_fct) +
labs(title = "Blocks")
plot4 <- ggplot(sites, aes(y = n, x = botanist_year)) +
geom_quasirandom(color = "grey") + geom_boxplot(fill = "transparent") +
labs(title = "Botanists and survey year") +
theme(axis.text.x = element_text(angle = 90))
(plot1 + plot2) / (plot3 + plot4)
ggplot(data = sites,
aes(x = sand_ratio, y = n, color = target_type)) +
geom_quasirandom(alpha = 0.5, dodge.width = 0.8) +
geom_boxplot(fill = "transparent") +
facet_grid(exposition ~ survey_year_fct) +
labs(title = "Target type vs. sand ratio [vol%]")
ggplot(data = sites,
aes(x = sand_ratio, y = n, color = substrate_depth)) +
geom_quasirandom(alpha = 0.5, dodge.width = 0.8) +
geom_boxplot(fill = "transparent") +
facet_grid(exposition ~ survey_year_fct) +
labs(title = "Substrate depth [cm] vs. sand ratio [vol%]")
ggplot(data = sites,
aes(x = seed_density, y = n, color = target_type)) +
geom_quasirandom(alpha = 0.5, dodge.width = 0.8) +
geom_boxplot(fill = "transparent") +
facet_grid(exposition ~ survey_year_fct) +
labs(title = "Target type vs. Seed density [g/m²]")
### b Outliers, zero-inflation, transformations? ----------------------------
sites %>% group_by(exposition) %>% count(site)
boxplot(sites$n)
ggplot(sites, aes(x = exposition, y = n)) + geom_quasirandom()
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.03)
ggplot(sites, aes(x = n)) + geom_density()
## 2 Model building ###########################################################
### a Preparation -------------------------------------------------------------
### Posssible priors ###
get_prior(n ~ target_type + exposition + sand_ratio + survey_year_fct +
seed_density + substrate_depth +
(1 | site/plot) + (1 | botanist_year),
data = sites)
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0.1, sd = 1)) +
expand_limits(y = 0) + ggtitle("Normal distribution")
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dcauchy, n = 101, args = list(location = 0, scale = 1)) +
expand_limits(y = 0) + ggtitle("Cauchy distribution")
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
### Model specifications ###
iter = 10000
chains = 4
thin = 2
seed = 123
warmup = floor(iter / 2)
priors <- c(
set_prior("normal(0, 1)", class = "Intercept"),
set_prior("normal(0, 1)", class = "b"),
set_prior("normal(0.1, 1)", class = "b", coef = "sand_ratio25"),
set_prior("normal(0.2, 1)", class = "b", coef = "sand_ratio50"),
set_prior("normal(0.1, 1)", class = "b", coef = "survey_year_fct2019"),
set_prior("normal(0.2, 1)", class = "b", coef = "survey_year_fct2020"),
set_prior("normal(0.3, 1)", class = "b",coef = "survey_year_fct2021"),
set_prior("cauchy(0, 1)", class = "sigma")
)
### b Models ------------------------------------------------------------------
m_simple <- brm(
n ~ sand_ratio + target_type + exposition + survey_year_fct +
substrate_depth + seed_density +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m_full <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth * seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
substrate_depth:exposition:survey_year_fct +
seed_density:exposition:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m1 <- brm(
n ~ sand_ratio * substrate_depth * exposition * survey_year_fct +
target_type + seed_density +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = floor(iter / 2),
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m2 <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth + seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m3 <- brm(
n ~ (sand_ratio + target_type + seed_density + substrate_depth) *
exposition * survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
save(m_simple, file = here("outputs", "models", "model_fcs_simple.Rdata"))
save(m_full, file = here("outputs", "models", "model_fcs_full.Rdata"))
save(m1, file = here("outputs", "models", "model_fcs_1.Rdata"))
save(m2, file = here("outputs", "models", "model_fcs_2.Rdata"))
save(m3, file = here("outputs", "models", "model_fcs_3.Rdata"))
sessionInfo()
