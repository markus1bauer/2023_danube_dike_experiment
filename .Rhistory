substrate_depth = col_factor(levels = c("30", "15")),
target_type = "f",
seed_density = "f"
)) %>%
filter(survey_year != "seeded") %>%
mutate(
n = fcs_target,
survey_year_fct = factor(survey_year)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, n
)
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE,
na = c("na", "NA", ""), col_types =
cols(
.default = "?",
id = "f",
plot = "f",
site = "f",
exposition = col_factor(levels = c("north", "south")),
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = "f",
seed_density = "f"
)) %>%
filter(survey_year != "seeded") %>%
mutate(
n = fcs_target,
survey_year_fct = factor(survey_year)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, n
)
### * Model ####
m <- m3
### * Functions ####
theme_mb <- function() {
theme(
panel.background = element_rect(fill = "white"),
text = element_text(size = 9, color = "black"),
strip.text = element_text(size = 10),
axis.text = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.title = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.line = element_line(),
legend.key = element_rect(fill = "white"),
legend.position = "right",
legend.margin = margin(0, 0, 0, 0, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm")
)
}
(graph_a <- ggplot() +
geom_quasirandom(
aes(y = n, x = sandRatio, color = targetType),
data = sites,
alpha = 0.5,
dodge.width = 0.8,
cex = .5
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
size = .3,
color = "grey70"
) +
geom_boxplot(
aes(y = n, x = sandRatio, fill = targetType),
data = sites,
alpha = 0.5
) +
facet_grid(
exposition ~ surveyYear_fac,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(-2.8, 1.9), breaks = seq(-100, 400, 1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression(
Favourable ~ Conservation ~ Status ~ "(FCS)"
)
) +
theme_mb())
(graph_a <- ggplot() +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
data = sites,
alpha = 0.5,
dodge.width = 0.8,
cex = .5
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
size = .3,
color = "grey70"
) +
geom_boxplot(
aes(y = n, x = sand_ratio, fill = target_type),
data = sites,
alpha = 0.5
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(-2.8, 1.9), breaks = seq(-100, 400, 1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression(
Favourable ~ Conservation ~ Status ~ "(FCS)"
)
) +
theme_mb())
(graph_a <- ggplot() +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
data = sites,
alpha = 0.5,
dodge.width = 0.8,
cex = .5
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
size = .3,
color = "grey70"
) +
#geom_boxplot(
#  aes(y = n, x = sand_ratio, fill = target_type),
#  data = sites,
#  alpha = 0.5
#) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(-2.8, 1.9), breaks = seq(-100, 400, 1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression(
Favourable ~ Conservation ~ Status ~ "(FCS)"
)
) +
theme_mb())
### a sandRatio x target Type -------------------------------------------------
m %>%
tidy_draws(m) %>%
summarise_draws() %>%
ggplot()
### a sandRatio x target Type -------------------------------------------------
m %>%
tidy_draws(m) %>%
summarise_draws() #%>%
### a sandRatio x target Type -------------------------------------------------
m %>%
tidy_draws() %>%
summarise_draws() #%>%
### a sandRatio x target Type -------------------------------------------------
m %>%
posterior::as_draws() %>%
posterior::summarise_draws() #%>%
### a sandRatio x target Type -------------------------------------------------
get_variables(m)
### a sandRatio x target Type -------------------------------------------------
get_variables(m) %>% slice(20)
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:20]
m %>%
posterior::as_draws() %>%
posterior::summarise_draws() #%>%
m %>%
posterior::as_draws() %>%
posterior::summarise_draws() %>%
spread_draws
m %>%
spread_draws()
m %>%
spread_draws(b_taret_typedry_grassland)
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:20]
m %>%
spread_draws("b_taret_typedry_grassland")
m %>%
spread_draws(b_target_typedry_grassland)
m %>%
spread_draws(b_target_typedry_grassland[c,t])
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:30]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:50]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:55]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[40:60]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[40:80]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[40:100]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[40:150]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[90:200]
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:20]
m %>%
spread_draws(b_target_typedry_grassland)
m %>%
spread_draws(b_target_typedry_grassland, b_exposition)
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth)
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021)
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
mean_qi(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021)
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
mean_qi()
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
summarise_draws()
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
summarise_draws() %>%
ggplot(aes(y = mean, ymin = q5, ymax = q95, x = variable))
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
summarise_draws() %>%
ggplot(aes(x = mean, xmin = q5, xmax = q95, y = variable)) %>%
geom_pointinterval()
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
summarise_draws() %>%
ggplot(aes(x = mean, xmin = q5, xmax = q95, y = variable)) +
geom_pointinterval()
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
summarise_draws() %>%
ggplot(aes(x = mean, xmin = q5, xmax = q95, y = variable)) +
stat_halfeye()
m %>%
spread_draws(b_target_typedry_grassland, b_expositionnorth, b_sand_ratio25,
b_sand_ratio50, b_survey_year_fct2019, b_survey_year_fct2020,
b_survey_year_fct2021) %>%
mutate(mean = b_Intercept + variable) %>%
ggplot(aes(x = mean, y = variable)) +
stat_halfeye()
m %>%
spread_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
mutate(mean = b_Intercept + variable) %>%
ggplot(aes(x = mean, y = variable)) +
stat_halfeye()
m %>%
spread_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) #%>%
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) #%>%
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable = "b_Intercept")
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye()
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye() +
geom_vline(0)
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed")
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_bw
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_bw()
m %>%
gather_draws(b_Intercept, b_target_typedry_grassland, b_expositionnorth,
b_sand_ratio25, b_sand_ratio50, b_survey_year_fct2019,
b_survey_year_fct2020, b_survey_year_fct2021) %>%
filter(.variable == "b_Intercept" | .variable == "b_target_typedry_grassland") %>%
ggplot(aes(x = .value, y = .variable)) +
stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_mb()
m %>%
data_grid(target_type)
m %>%
modelr::data_grid(target_type)
### Packages ###
library(here)
library(tidyverse)
### Packages ###
library(here)
library(tidyverse)
### Packages ###
library(here)
library(tidyverse)
install.packages("tidyverse")
library(ggbeeswarm)
library(tidyverse)
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE,
na = c("na", "NA", ""), col_types =
cols(
.default = "?",
id = "f",
plot = "f",
site = "f",
exposition = col_factor(levels = c("north", "south")),
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = "f",
seed_density = "f"
)) %>%
filter(survey_year != "seeded") %>%
mutate(
n = fcs_target,
survey_year_fct = factor(survey_year)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, n
)
install.packages(c("ade4", "adegenet", "adephylo", "adespatial", "bayestestR", "brew", "brms", "Brobdingnag", "broom", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "covr", "cpp11", "crayon", "crul", "curl", "data.table", "datawizard", "DBI", "dbplyr", "desc", "DHARMa", "digest", "distributional", "dplyr", "DT", "dtplyr", "e1071", "effectsize", "emmeans", "estimability", "evaluate", "farver", "fontawesome", "forcats", "future", "gap", "gargle", "generics", "geojsonsf", "geometry", "ggdist", "ggeffects", "ggmap", "ggplot2", "ggrepel", "ggridges", "ggspatial", "globals", "googlesheets4", "gtable", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "latticeExtra", "lifecycle", "lme4", "lpSolve", "lubridate", "lwgeom", "maptools", "markdown", "MASS", "MatrixModels", "minqa", "modelr", "NCmisc", "nleqslv", "nloptr", "openssl", "parallelly", "parameters", "patchwork", "performance", "phangorn", "pillar", "pkgload", "plotly", "posterior", "prettymapr", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "renv", "reprex", "rgdal", "rlang", "rmarkdown", "RNeXML", "rosm", "rotl", "rstudioapi", "rvest", "s2", "sass", "scales", "segmented", "servr", "sf", "shiny", "sjPlot", "sp", "spData", "spdep", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "wk", "xfun", "XML", "xts", "yaml", "zoo"))
### Packages ###
library(here)
library(tidyverse)
renv::status()
renv::record()
renv::record("renv@0.16.0")
renv::restore()
renv::restore()
### Save ###
save(m3, here("outputs", "statistics", "model_fcs_3"))
write.csv(draws, file = here("outputs", "statistics", "table_fcs_target_m3.csv"))
### Save ###
save(m3, here("outputs", "statistics", "model_fcs_3"))
save(m3, file = here("outputs", "statistics", "model_fcs_3"))
### Packages ###
library(here)
library(tidyverse)
save(m3, file = here("outputs", "statistics", "model_fcs_3"))
### Save ###
save(m3, file = here("data", "processed", "model_fcs_3"))
install.packages("tidyverse")
library(tidyverse)
remove.packages("dbplyr")
install.packages("dbplyr")
library(tidyverse)
library(dbplyr)
devtools::install_github("RobinHankin/Brobdingnag")
install.packages("devtools")
save(m3_flat, file = here("data", "processed", "model_fcs_3_flat"))
renv::status()
renv::snapshot()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
### Packages ###
library(here)
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
### Start ###
#rm(list = setdiff(ls(), c("graph_a", "graph_b", "graph_c", "graph_d")))
setwd(here("data", "processed"))
load(file = here("data", "processed", "model_fcs_3"))
x <- load(file = here("data", "processed", "model_fcs_3"))
load(file = here("data", "processed", "model_fcs_3"))
load(file = here("data", "processed", "model_fcs_3.Rdata"))
### Save ###
save(m3, file = here("data", "processed", "model_fcs_3.Rdata"))
save(m3_flat, file = here("data", "processed", "model_fcs_3_flat.Rdata"))
### Start ###
#rm(list = setdiff(ls(), c("graph_a", "graph_b", "graph_c", "graph_d")))
setwd(here("data", "processed"))
load(file = here("data", "processed", "model_fcs_3.Rdata"))
### * Model ####
m3
### * Functions ####
theme_mb <- function() {
theme(
panel.background = element_rect(fill = "white"),
text = element_text(size = 9, color = "black"),
strip.text = element_text(size = 10),
axis.text = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.title = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.line = element_line(),
legend.key = element_rect(fill = "white"),
legend.position = "right",
legend.margin = margin(0, 0, 0, 0, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm")
)
}
### a sandRatio x target Type -------------------------------------------------
get_variables(m)[1:20]
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
devtools::install_github("RobinHankin/Brobdingnag")
install.packages("Matrix")
### Packages ###
library(here)
library(tidyverse)
devtools::install_github("RobinHankin/Brobdingnag")
### Packages ###
library(here)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(c("ade4", "adegenet", "adephylo", "adespatial", "bayestestR", "brew", "brms", "broom", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "covr", "cpp11", "crayon", "crul", "curl", "data.table", "datawizard", "DBI", "desc", "DHARMa", "digest", "distributional", "dplyr", "DT", "dtplyr", "e1071", "effectsize", "emmeans", "estimability", "evaluate", "farver", "fontawesome", "forcats", "foreign", "future", "gap", "gargle", "generics", "geojsonsf", "geometry", "ggdist", "ggeffects", "ggmap", "ggplot2", "ggrepel", "ggridges", "ggspatial", "globals", "googlesheets4", "gtable", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "latticeExtra", "lifecycle", "lme4", "lpSolve", "lubridate", "lwgeom", "maptools", "markdown", "MASS", "MatrixModels", "mgcv", "minqa", "modelr", "NCmisc", "nleqslv", "nlme", "nloptr", "nnet", "openssl", "parallelly", "parameters", "patchwork", "performance", "phangorn", "pillar", "plotly", "posterior", "prettymapr", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rgdal", "rmarkdown", "RNeXML", "rosm", "rotl", "rpart", "rstan", "rstudioapi", "rvest", "s2", "sass", "scales", "segmented", "servr", "sf", "shiny", "sjPlot", "sp", "spData", "spdep", "stars", "stringi", "stringr", "sys", "terra", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "wk", "xfun", "XML", "xts", "yaml", "zoo"))
renv::status()
renv::snapshot()
install.packages(c("ade4", "adegenet", "adephylo", "adespatial", "broom", "DHARMa", "DT", "forcats", "gtools", "lme4", "lubridate"))
install.packages(c("data.table", "dplyr", "dtplyr", "emmeans", "gtable", "MASS", "mgcv", "nlme"))
install.packages(c("sf", "shiny", "sjPlot", "sp", "spData", "tibble", "tidyr", "tidyselect", "vegan", "yaml"))
install.packages(c("bayestestR", "brew", "brms", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "covr", "cpp11", "crayon", "crul", "curl", "datawizard", "DBI", "desc", "digest", "distributional", "e1071", "effectsize", "evaluate", "farver", "fontawesome", "foreign", "future", "gap", "gargle", "generics", "geojsonsf", "geometry", "ggdist", "ggeffects", "ggmap", "ggplot2", "ggrepel", "ggridges", "ggspatial", "globals", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "latticeExtra", "lifecycle", "lpSolve", "lwgeom", "maptools", "markdown", "MatrixModels", "minqa", "modelr", "NCmisc", "nleqslv", "nloptr", "nnet", "openssl", "parallelly", "parameters", "patchwork", "performance", "phangorn", "pillar", "plotly", "prettymapr", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rgdal", "rmarkdown", "RNeXML", "rosm", "rotl", "rpart", "rstan", "rstudioapi", "rvest", "s2", "sass", "scales", "segmented", "servr", "shiny", "sjPlot", "sp", "spData", "spdep", "stars", "stringi", "stringr", "sys", "terra", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "wk", "xfun", "XML", "xts", "yaml", "zoo"))
install.packages(c("bayestestR", "brew", "brms"))
install.packages(c("bslib", "callr", "car", "classInt", "cli"))
install.packages(c("colourpicker", "commonmark", "covr", "cpp11", "crayon", "crul", "curl", "DBI", "desc", "digest"))
install.packages(c("distributional", "e1071", "effectsize", "evaluate", "farver", "fontawesome", "foreign", "future", "gap", "gargle"))
renv::snapshot(confirm = FALSE)
install.packages(c("generics", "geojsonsf", "geometry", "ggdist", "ggeffects", "ggmap", "ggplot2", "ggrepel", "ggridges", "ggspatial"))
install.packages(c("googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "igraph", "isoband"))
install.packages(c("jsonlite", "knitr", "latticeExtra", "lifecycle", "lpSolve", "lwgeom", "maptools", "markdown", "MatrixModels", "minqa"))
install.packages(c("modelr", "NCmisc", "nleqslv", "nloptr", "nnet", "openssl", "patchwork", "pillar", "plotly"))
install.packages(c("phangorn", "prettymapr", "proxy", "ps", "purrr", "quantreg", "raster"))
renv::snapshot(confirm = FALSE)
install.packages(c("readr", "readxl", "reprex", "rmarkdown", "RNeXML", "rosm"))
install.packages(c("rstudioapi", "rvest", "s2", "sass", "scales", "segmented", "servr", "shiny", "sjPlot"))
install.packages(c("V8", "vctrs", "vegan", "viridisLite", "webshot", "wk", "xfun", "XML", "xts", "yaml", "zoo"))
renv::snapshot()
