(1 | block/plot) + (1 | surveyYear_fac), sites, REML = FALSE)
simulateResiduals(m2, plot = TRUE)
### Model output -------------------------------------------------------------
MuMIn::r.squaredGLMM(m2)
car::Anova(m2, type = 3)
#fixed effects
m2 <- lmer((n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) +
exposition:sandRatio + exposition:targetType +
(1 | block/plot) + (1 | surveyYear_fac), sites, REML = FALSE)
simulateResiduals(m2, plot = TRUE)
### Model output -------------------------------------------------------------
MuMIn::r.squaredGLMM(m2)
#fixed and site and year effects
m3 <- lmer((n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) + surveyYear_fac +
exposition:sandRatio + exposition:targetType +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m3, plot = TRUE)
#fixed and site and year effects
m3 <- lmer(log(n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) + surveyYear_fac +
exposition:sandRatio + exposition:targetType +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m3, plot = TRUE)
#fixed and site and year effects
m3 <- lmer(sqrt(n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) + surveyYear_fac +
exposition:sandRatio + exposition:targetType +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m3, plot = TRUE)
m4 <- lmer(sqrt(n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity + surveyYear_fac)^2 +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m4, plot = TRUE)
m4 <- lmer(sqrt(n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity)^2 + surveyYear_fac +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m4, plot = TRUE)
### Model output -------------------------------------------------------------
MuMIn::r.squaredGLMM(m4)
m4 <- lmer(sqrt(n) ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity + surveyYear_fac)^3 +
(1 | block/plot), sites, REML = FALSE)
simulateResiduals(m4, plot = TRUE)
ggplot(sites %>% filter(surveyYear == 2021, aes(y = n, x = targetType)) +
ggplot(sites %>% filter(surveyYear == 2021, aes(y = n, x = targetType)) +
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = targetType)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = targetType)) +
geom_boxplot() + geom_quasirandom()
#2way
ggplot(sites %>% filter(surveyYear == 2021), aes(x = exposition, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021), aes(x = sandRatio, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021),
aes(x = exposition, y = n, color = sandRatio)) +
geom_boxplot() + facet_wrap(~ targetType)
library(brms)
install.packages("brms")
renv::snaphshot()
renv::snapshot()
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
library(brms)
library(BayesianTools)
library(DHARMa)
library(MCMCvis)
library(emmeans)
### Start ###
rm(list = ls())
setwd(here("data", "processed"))
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear)) %>%
select(id, plot, block, surveyYear, surveyYear_fac, exposition,
sandRatio, substrateDepth, seedDensity, targetType, n, botanist)
#### a Graphs -----------------------------------------------------------------
#simple effects:
ggplot(sites, aes(y = n, x = exposition)) +
geom_boxplot() + geom_quasirandom()
#### a Graphs -----------------------------------------------------------------
#simple effects:
ggplot(sites %>% filter(surveyYear == 2021, aes(y = n, x = exposition)) +
#### a Graphs -----------------------------------------------------------------
#simple effects:
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = exposition)) +
geom_boxplot() + geom_quasirandom()
#### a Graphs -----------------------------------------------------------------
#simple effects:
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = exposition)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = targetType)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = seedDensity)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = substrateDepth)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = sandRatio)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = block)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites %>% filter(surveyYear == 2021), aes(y = n, x = botanist)) +
geom_boxplot() + geom_quasirandom()
ggplot(sites, aes(y = n, x = botanist)) +
geom_boxplot() + geom_quasirandom()
#2way
ggplot(sites %>% filter(surveyYear == 2021), aes(x = exposition, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021), aes(x = sandRatio, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021), aes(x = substrateDepth, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021), aes(x = sandRatio, y = n)) +
geom_boxplot() + geom_quasirandom() + facet_wrap(~ exposition)
#3way
ggplot(sites, aes(x = exposition, y = n, color = sandRatio)) +
geom_boxplot() +
facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021),
aes(x = exposition, y = n, color = sandRatio)) +
geom_boxplot() + facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021),
aes(x = exposition, y = n, color = substrateDepth)) +
geom_boxplot() +
facet_wrap(~ targetType)
ggplot(sites %>% filter(surveyYear == 2021),
aes(x = substrateDepth, y = n, color = sandRatio)) +
geom_boxplot() +
facet_wrap(~ targetType)
ggplot(sites, aes(x = factor(surveyYear), y = n, color = targetType)) +
geom_boxplot() +
facet_wrap(~ exposition)
#4way
ggplot(sites %>% filter(surveyYear == 2021), aes(x = exposition, y = n,
color = sandRatio, fill = substrateDepth)) +
geom_boxplot() + facet_wrap(~ targetType)
##### b Outliers, zero-inflation, transformations? ----------------------------
dotchart((sites$n), groups = factor(sites$exposition),
main = "Cleveland dotplot")
sites %>% count(block)
boxplot(sites$n)
plot(table((sites$n)), type = "h",
xlab = "Observed values", ylab = "Frequency")
ggplot(sites, aes(n)) + geom_density()
ggplot(sites, aes(log(n))) + geom_density()
#### a models -----------------------------------------------------------------
iter = 10000
chains = 4
set.seed(123)
parallel::detectCores()
botanist_year <- sites$botanist:sites$surveyYear
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear),
botanist_year = str_c(botanist, surveyYear, sep = "_")) %>%
select(id, plot, block, surveyYear, surveyYear_fac, exposition,
sandRatio, substrateDepth, seedDensity, targetType, n, botanist)
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear),
botanist_year = str_c(botanist, surveyYear, sep = "_")) %>%
select(id, plot, block, surveyYear, surveyYear_fac, botanist, botanist_year,
exposition, sandRatio, substrateDepth, seedDensity, targetType, n)
View(sites)
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear),
botanist_year = str_c(botanist, surveyYear, sep = " ")) %>%
select(id, plot, block, surveyYear, surveyYear_fac, botanist, botanist_year,
exposition, sandRatio, substrateDepth, seedDensity, targetType, n)
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear),
botanist_year = str_c(botanist, surveyYear, sep = " "),
botanist_year = factor(botanist_year)) %>%
select(id, plot, block, surveyYear, surveyYear_fac, botanist, botanist_year,
exposition, sandRatio, substrateDepth, seedDensity, targetType, n)
ggplot(sites, aes(y = n, x = botanist_year)) +
geom_boxplot() + geom_quasirandom()
(1 | block/plot) + (1 | botanist_year),
m2 <- brm(n ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) +
(1 | block/plot) + (1 | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores())
plot(m2) # check convergence visually
pairs(m2)
posterior <- as.mcmc(m2)
coda::effectiveSize(m2) # check ESS
summary(m2) # check convergence by PSRF
m <- brm(n ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) +
(1 | block/plot) + (1 | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores())
m1 <- brm(n ~ 1 +
(1 | block/plot) + (1 | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores(),
seed = 123)
summary(m1)
summary(m2) # check convergence by ESS and PSRF
m3 <- brm(n ~ (exposition + substrateDepth + sandRatio + targetType +
seedDensity) +
(1 + targetType | block/plot) + (1 + targetType | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores(),
seed = 123)
summary(m3) # check convergence by ESS and PSRF
m4 <- brm(n ~ (exposition + substrateDepth + sandRatio + seedDensity) *
targetType +
(1 + targetType | block/plot) + (1 + targetType | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores(),
seed = 123)
summary(m4) # check convergence by ESS and PSRF
m5 <- brm(n ~ exposition * substrateDepth * sandRatio + seedDensity +
targetType +
(1 + targetType | block/plot) + (1 + targetType | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
cores = parallel::detectCores(),
seed = 123)
summary(m5) # check convergence by ESS and PSRF
m5 <- brm(n ~ exposition * substrateDepth * sandRatio + seedDensity +
targetType +
(1 + targetType | block/plot) + (1 + targetType | botanist_year),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
control = list(adapt_delta = 0.99),
cores = parallel::detectCores(),
seed = 123)
summary(m5) # check convergence by ESS and PSRF
ggplot(sites %>% filter(surveyYear == 2021),
aes(x = substrateDepth, y = n, color = sandRatio)) +
geom_boxplot() +
facet_wrap(~ exposition)
#### b comparison ------------------------------------------------------------
bayes_factor(m2, m3, m4, m5, log = FALSE)
#### b comparison ------------------------------------------------------------
bayes_factor(m2, m5, log = FALSE)
#### b comparison ------------------------------------------------------------
bayes_factor(m4, m5, log = FALSE)
#### b comparison ------------------------------------------------------------
brms::bayes_factor(m4, m5, log = FALSE)
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m5)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m5)), 1, mean),
integerResponse = TRUE
)
plot(model_check)
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m2)), 1, mean),
integerResponse = TRUE
);plot(model_check)
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m3)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m3)), 1, mean),
integerResponse = TRUE
);plot(model_check)
(model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m4)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m4)), 1, mean),
integerResponse = TRUE
))
(model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m5)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m5)), 1, mean),
integerResponse = TRUE
))
(model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m2)), 1, mean),
integerResponse = TRUE
))
(model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m2)), 1, mean),
integerResponse = TRUE
))
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m2)), 1, mean),
integerResponse = TRUE
) %>% plot()
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m3)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m3)), 1, mean),
integerResponse = TRUE
) %>%
plot()
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m4)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m4)), 1, mean),
integerResponse = TRUE
) %>%
plot()
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m5)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m5)), 1, mean),
integerResponse = TRUE
) %>%
plot()
m6 <- brm(n ~ exposition * substrateDepth * sandRatio + seedDensity +
targetType + botanist_year +
(1 + targetType | block/plot),
data = sites,
warmup = 500,
chains = chains,
iter = iter,
prior = set_prior("cauchy(0,1)", class = "sigma"),
control = list(adapt_delta = 0.99),
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = 123)
summary(m6) # check convergence by ESS and PSRF
MCMCtrace(m6,
#params = c('beta[1]', 'beta[2]', 'beta[3]'),
ISB = FALSE,
exact = TRUE,
Rhat = TRUE,
n.eff = TRUE,
pdf = TRUE)
model_check <- createDHARMa(
simulatedResponse = t(posterior_predict(m6)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m6)), 1, mean),
integerResponse = TRUE
) %>%
plot()
MCMCplot(m6,
params = "beta",
#ci = c(50, 80),
HPD = FALSE,
ref_ovl = TRUE)
MCMCplot(m6,
#params = "beta",
#ci = c(50, 80),
HPD = FALSE,
ref_ovl = TRUE)
MCMCplot(m6)#,
MCMCvis::MCMCplot(m6)#,
MCMCplot(m6)#,
prior_summary(m6)
plot(hypothesis(model6, "targetType > 0"))
plot(hypothesis(m6, "targetType > 0"))
plot(hypothesis(m6, "targetTypedry_grassland > 0"))
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
library(brms)
library(DHARMa)
library(MCMCvis)
library(emmeans)
### Start ###
rm(list = ls())
setwd(here("data", "processed"))
### Load data ###
sites <- read_csv("data_processed_sites.csv",
col_names = TRUE, na = c("na", "NA"), col_types =
cols(
.default = "?",
block = "f",
exposition = "f",
sandRatio = "f",
substrateDepth = "f",
seedDensity = "f",
targetType = "f"
)
) %>%
filter(!str_detect(id, "C")) %>%
mutate(n = cwmAbuSla,
surveyYear_fac = factor(surveyYear),
botanist_year = str_c(botanist, surveyYear, sep = " "),
botanist_year = factor(botanist_year)) %>%
select(id, plot, block, surveyYear, surveyYear_fac, botanist, botanist_year,
exposition, sandRatio, substrateDepth, seedDensity, targetType, n)
library(tidyverse)
install.packages("tidyverse")
### Packages ###
library(here)
library(tidyverse)
### Packages ###
library(here)
library(tidyverse)
### Packages ###
library(here)
library(tidyverse)
install.packages("tidyverse")
library(ggbeeswarm)
library(brms)
library(DHARMa)
library(MCMCvis)
library(emmeans)
library(tidyverse)
renv::snapshot(confirm = FALSE)
install.packages(c("adespatial", "betapart", "igraph", "lme4", "norm", "parallelly", "RcppEigen", "rstantools", "vctrs"))
install.packages(c("adespatial", "betapart", "igraph", "lme4", "norm", "parallelly", "RcppEigen", "rstantools", "vctrs"))
install.packages(c("adespatial", "betapart", "igraph", "lme4", "norm", "parallelly", "RcppEigen", "rstantools", "vctrs"))
install.packages(c("adespatial", "betapart", "igraph", "lme4", "norm", "parallelly", "RcppEigen", "rstantools", "vctrs"))
renv::snapshot()
### Packages ###
library(here)
library(tidyverse)
