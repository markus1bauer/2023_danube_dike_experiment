ggsave(here("outputs", "figures",
"figure_2_fcs_target_800dpi_27x9cm.tiff"),
dpi = 800, width = 27, height = 9, units = "cm")
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
library(patchwork)
library(brms)
### Start ###
rm(list = ls())
### Load data ###
sites <- read_csv(here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = "f",
target_type = col_factor(levels = c(
"dry_grassland", "hay_meadow"
)),
seed_density = "f",
exposition = col_factor(levels = c(
"north", "south"
)),
survey_year = "d"
)) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
plot(table((sites$n)), type = "h",
xlab = "Observed values", ylab = "Frequency")
ggplot(sites, aes(x = n)) + geom_density()
ggplot(sites, aes(x = n)) + geom_histogram()
plot(table((sites$n)), type = "h",
xlab = "Observed values", ylab = "Frequency")
ggplot(sites, aes(x = n)) + geom_histogram()
ggplot(sites, aes(x = n)) + geom_histogram(biwidth = 0.01)
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.01)
plot(table((sites$n)), type = "h",
xlab = "Observed values", ylab = "Frequency")
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.01)
boxplot(sites$n)
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.01)
sites %>% group_by(exposition) %>% count(site)
dotchart((sites$n), groups = factor(sites$exposition),
main = "Cleveland dotplot")
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot()
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot(binwidth = 0.01)
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot(binwidth = 1)
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot(binwidth = .1)
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot(binwidth = .01)
ggplot(sites, aes(x = n, y = exposition)) + geom_dotplot(binwidth = .05)
ggplot(sites, aes(y = n, x = exposition)) + geom_dotplot(binwidth = .05)
ggplot(sites, aes(y = n, x = exposition)) + geom_dotplot(binwidth = .05)
ggplot(sites, aes(y = n)) + geom_dotplot(binwidth = .05)
ggplot(sites, aes(y = n, x = exposition)) + geom_dotplot(binwidth = .05)
ggplot(sites, aes(y = n, x = exposition)) + geom_dotplot()
ggplot(sites, aes(y = n, x = exposition, group = exposition)) + geom_dotplot()
ggplot(sites %>% group_by(exposition), aes(y = n, x = exposition)) + geom_dotplot()
ggplot(sites %>% ungroup(), aes(y = n, x = exposition)) + geom_dotplot()
ggplot(sites, aes(x = exposition, y = n)) + geom_dotplot()
ggplot(sites, aes(x = exposition, y = n)) + geom_dotplot(binaxis='y', stackdir='center')
ggplot(sites, aes(x = exposition, y = n)) + geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.05)
ggplot(sites, aes(x = exposition, y = n)) + geom_beeswarm()
ggplot(sites, aes(x = exposition, y = n)) + geom_quasirandom()
sites %>% group_by(exposition) %>% count(site)
boxplot(sites$n)
ggplot(sites, aes(x = exposition, y = n)) + geom_quasirandom()
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.01)
ggplot(sites, aes(x = n)) + geom_density()
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.02)
ggplot(sites, aes(x = n)) + geom_histogram(binwidth = 0.03)
ggplot(sites, aes(x = n)) + geom_density()
ggplot(sites, aes(sqrt(n))) + geom_density()
### Packages ###
library(here)
library(tidyverse)
library(brms)
library(DHARMa)
library(bayesplot)
library(loo)
library(tidybayes)
library(emmeans)
### Start ###
rm(list = ls())
### Load data ###
load(file = here("data", "processed", "model_fcs_1.Rdata"))
load(file = here("data", "processed", "model_fcs_2.Rdata"))
load(file = here("data", "processed", "model_fcs_3.Rdata"))
load(file = here("data", "processed", "model_fcs_1_flat.Rdata"))
m_1 <- m1
m_2 <- m2
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
#### * DHARMa ####
createDHARMa(
simulatedResponse = t(posterior_predict(m_1)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_1)), 1, mean),
integerResponse = TRUE
) %>%
plot()
createDHARMa(
simulatedResponse = t(posterior_predict(m_2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_2)), 1, mean),
integerResponse = TRUE
) %>%
plot()
### Packages ###
library(here)
library(tidyverse)
library(brms)
library(DHARMa)
library(bayesplot)
library(loo)
library(tidybayes)
library(emmeans)
### Start ###
rm(list = ls())
### Load data ###
sites <- read_csv(here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = "f",
target_type = col_factor(levels = c(
"dry_grassland", "hay_meadow"
)),
seed_density = "f",
exposition = col_factor(levels = c(
"north", "south"
)),
survey_year = "d"
)) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
load(file = here("data", "processed", "model_fcs_1.Rdata"))
load(file = here("data", "processed", "model_fcs_2.Rdata"))
load(file = here("data", "processed", "model_fcs_3.Rdata"))
load(file = here("data", "processed", "model_fcs_1_flat.Rdata"))
m_1 <- m1
m_2 <- m2
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula = 1 ~ 1)
#### * DHARMa ####
createDHARMa(
simulatedResponse = t(posterior_predict(m_1)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_1)), 1, mean),
integerResponse = TRUE
) %>%
plot()
createDHARMa(
simulatedResponse = t(posterior_predict(m_2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_2)), 1, mean),
integerResponse = TRUE
) %>%
plot()
m_1$formula
m_1$formula
m_2$formula
#### * Preparation ####
posterior1 <- m_1 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth30",
"b_target_typehay_meadow",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sd_botanist_year__Intercept",
"sigma"
)
)
posterior2 <- m_2 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth30",
"b_target_typehay_meadow",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sd_botanist_year__Intercept",
"sigma"
)
)
hmc_diagnostics1 <- nuts_params(m_1)
hmc_diagnostics2 <- nuts_params(m_2)
y <- sites$n
yrep1 <- posterior_predict(m_1, draws = 500)
yrep2 <- posterior_predict(m_2, draws = 500)
loo1 <- loo(m_1, save_psis = TRUE, moment_match = FALSE)
loo2 <- loo(m_2, save_psis = TRUE, moment_match = FALSE)
draws1 <- m_1 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
draws2 <- m_2 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
#### * Samling efficency/effectiveness (Rhat and EFF) ####
range(draws1$rhat)
range(draws2$rhat)
range(draws1$ess_bulk)
range(draws2$ess_bulk)
range(draws1$ess_tail)
range(draws2$ess_tail)
#### * MCMC diagnostics ####
mcmc_trace(posterior1, np = hmc_diagnostics1)
mcmc_trace(posterior2, np = hmc_diagnostics2)
mcmc_scatter(m_1,
pars = c("b_survey_year_fct2020", "b_survey_year_fct2019"),
np = hmc_diagnostics1,
size = 1)
mcmc_scatter(m_2,
pars = c("b_survey_year_fct2020", "b_survey_year_fct2019"),
np = hmc_diagnostics2,
size = 1)
mcmc_parcoord(posterior1, np = hmc_diagnostics1)
mcmc_parcoord(posterior2, np = hmc_diagnostics2)
#### * Posterior predictive check ####
#### Kernel density
par(mfrow(c(2, 2)))
ppc_dens_overlay(y, yrep1[1:50, ])
ppc_dens_overlay(y, yrep2[1:50, ])
ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$site)
ppc_dens_overlay_grouped(y, yrep2[1:50, ], group = sites$site)
#### * Posterior predictive check ####
#### Kernel density
par(mfrow(c(2, 2)))
ppc_dens_overlay(y, yrep1[1:50, ])
ppc_dens_overlay(y, yrep2[1:50, ])
m_1 <- m1
m_2 <- m3
#### * DHARMa ####
createDHARMa(
simulatedResponse = t(posterior_predict(m_1)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_1)), 1, mean),
integerResponse = TRUE
) %>%
plot()
createDHARMa(
simulatedResponse = t(posterior_predict(m_2)),
observedResponse = sites$n,
fittedPredictedResponse = apply(t(posterior_epred(m_2)), 1, mean),
integerResponse = TRUE
) %>%
plot()
#### * Preparation ####
posterior1 <- m_1 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth30",
"b_target_typehay_meadow",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sd_botanist_year__Intercept",
"sigma"
)
)
posterior2 <- m_2 %>%
posterior::as_draws() %>%
posterior::subset_draws(
variable = c(
"b_sand_ratio25",
"b_sand_ratio50",
"b_substrate_depth30",
"b_target_typehay_meadow",
"b_seed_density8",
"b_expositionsouth",
"b_survey_year_fct2019",
"b_survey_year_fct2020",
"b_survey_year_fct2021",
"sd_site__Intercept",
"sd_site:plot__Intercept",
"sd_botanist_year__Intercept",
"sigma"
)
)
hmc_diagnostics1 <- nuts_params(m_1)
hmc_diagnostics2 <- nuts_params(m_2)
y <- sites$n
yrep1 <- posterior_predict(m_1, draws = 500)
yrep2 <- posterior_predict(m_2, draws = 500)
loo1 <- loo(m_1, save_psis = TRUE, moment_match = FALSE)
loo2 <- loo(m_2, save_psis = TRUE, moment_match = FALSE)
draws1 <- m_1 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
draws2 <- m_2 %>%
posterior::as_draws() %>%
posterior::summarize_draws() %>%
filter(str_starts(variable, "b_"))
#### * Posterior predictive check ####
#### Kernel density
p1 <- ppc_dens_overlay(y, yrep1[1:50, ])
p2 <- ppc_dens_overlay(y, yrep2[1:50, ])
p1 + p2
p1 / p2
ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$exposition)
ppc_dens_overlay_grouped(y, yrep2[1:50, ], group = sites$exposition)
p1 / p2
p1 <- ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$exposition)
p2 <- ppc_dens_overlay_grouped(y, yrep2[1:50, ], group = sites$exposition)
p1 / p2
ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$survey_year_fct)
ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$sand_ratio)
p1 <- ppc_dens_overlay_grouped(y, yrep1[1:50, ], group = sites$sand_ratio)
p2 <- ppc_dens_overlay_grouped(y, yrep2[1:50, ], group = sites$sand_ratio)
p1 / p2
#### Histograms of statistics skew
ppc_stat(y, yrep1, binwidth = 0.001)
ppc_stat(y, yrep2, binwidth = 0.001)
#### LOO-PIT plots
ppc_loo_pit_overlay(y, yrep1, lw = weights(loo1$psis_object))
prior_summary(m_1)
bayes_R2(m_1, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
bayes_R2(m_2, probs = c(0.05, 0.5, 0.95),
re_formula =  ~ (1 | site/plot) + (1 | botanist_year))
draws1
mcmc_intervals(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
sjPlot::plot_model(m_1, m_2, type = "est")
sjPlot::plot_model(m_2, type = "est")
sjPlot::plot_model(c(m_1, m_2), type = "est")
sjPlot::plot_model(m_1, m_2, type = "est")
sjPlot::plot_model(m_1, type = "est", ppd = TRUE)
sjPlot::plot_model(m_1, type = "est", ppd = FALSE)
sjPlot::plot_model(
m_1, m_2, type = "est", ppd = TRUE,
terms = c(
"sand_ratio", "substrate_depth", "target_type",
"seed_density",  "exposition", "survey_year_fct"
)
)
sjPlot::plot_model(
m_1, m_2, type = "est", ppd = TRUE,
terms = c(
"sand_ratio"
)
)
sjPlot::plot_model(
m_1, type = "est", ppd = TRUE,
terms = c(
"sand_ratio"
)
)
sjPlot::plot_model(
m_1, type = "est", ppd = TRUE,
terms = c(
"sand_ratio"
)
)
sjPlot::plot_model(
m_1, type = "est", ppd = TRUE,
terms = c(
"target_type"
)
)
sjPlot::plot_model(
m_1, type = "est",
terms = c(
"target_type"
)
)
sjPlot::plot_model(
m_1, type = "est",
terms = c(
"target_type", "sand_ratio"
)
)
sjPlot::plot_model(m_1, type = "est")
dotwhisker::dwplot(m_1)
dotwhisker::dwplot(m_1, arg = "median")
dotwhisker::dwplot(m_1, dot_arg = "median")
sjPlot::plot_model(m_2, type = "est")
sjPlot::plot_model(m_1, type = "est", terms = "sand_ratio")
sjPlot::plot_model(m_1, type = "est", terms = "b_sand_ratio25")
mcmc_intervals(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_intervals(
posterior2,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_areas(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_areas(
posterior2,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_intervals(
posterior2,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_area_ridges(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_areas_ridges(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_intervals(
posterior1,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_intervals(
posterior2,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
mcmc_intervals(
posterior1, posterior2,
prob = 0.5,
prob_outer = 0.95,
point_est = "mean"
)
(emm <- emmeans(m_2, revpairwise ~ target_type + sand_ratio |
exposition | survey_year_fct, type = "response"))
prior_summary(m_2, all = FALSE)
