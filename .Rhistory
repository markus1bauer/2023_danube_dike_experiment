)
m3 <- brm(
n ~ (sand_ratio + target_type + seed_density + substrate_depth) *
exposition * survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
m2_flat <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth + seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = c(
set_prior("normal(0, 4)", class = "Intercept"),
set_prior("normal(0, 4)", class = "b"),
set_prior("cauchy(0, 1)", class = "sigma")
),
chains = 3,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
### c Save ---------------------------------------------------------------------
save(m_simple, file = here("outputs", "models", "model_fcs_simple.Rdata"))
save(m_full, file = here("outputs", "models", "model_fcs_full.Rdata"))
save(m1, file = here("outputs", "models", "model_fcs_1.Rdata"))
save(m2, file = here("outputs", "models", "model_fcs_2.Rdata"))
save(m3, file = here("outputs", "models", "model_fcs_3.Rdata"))
save(m2_flat, file = here("outputs", "models", "model_fcs_2_flat.Rdata"))
m2 <- brm(
n ~ sand_ratio * target_type * exposition * survey_year_fct +
substrate_depth + seed_density +
substrate_depth:exposition +
seed_density:exposition +
substrate_depth:survey_year_fct +
seed_density:survey_year_fct +
botanist_year + (1 | site/plot),
data = sites,
family = gaussian("identity"),
prior = priors,
chains = chains,
iter = iter,
thin = thin,
control = list(max_treedepth = 13),
warmup = warmup,
save_pars = save_pars(all = TRUE),
cores = parallel::detectCores(),
seed = seed
)
save(m2, file = here("outputs", "models", "model_fcs_2.Rdata"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 5, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 100, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_density_ridges(quantile_lines = TRUE, quantiles = c(0.025, 0.975))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
ggridges::stat_density_ridges(quantile_lines = TRUE, quantiles = c(0.025, 0.975))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.975)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.975)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
data.frame(x = c(-1, 1)), aes(x = x)
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data = data.frame(x = c(-1, 1)), aes(x = x)) +
#stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x, y = 0)) +
#stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
#ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
#stat_function(fun = dstudent_t, args = list(df = 3, mu = 0, sigma = 0.2)) +
data <- data.frame(x = c(-1, 1))
ggplot(data, aes(x = x)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data, aes(x = x, y = 0)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
dat <- rnorm(1000)
df <- tibble(dat)
ggplot(df, aes(x = x, y = 0)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(df, aes(x = dat, y = 0)) +
ggridges::stat_density_ridges(
quantile_lines = TRUE, quantiles = c(0.025, 0.5)
) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t,
geom = "ribbon",
args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t,
geom = "ribbon",
mappinig = aes(ymin = 0, ymax = 0.5),
args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dstudent_t,
geom = "ribbon",
mappinig = aes(ymin = 0, ymax = 0.1),
args = list(df = 3, mu = 0, sigma = 2.5)) +
expand_limits(y = 0) + ggtitle(expression(Student~italic(t)*"-distribution"))
### Start ###
rm(list = setdiff(ls(), c("graph_a", "graph_b", "graph_c", "graph_d")))
### Load data ###
sites <- read_csv(
here("data", "processed", "data_processed_sites_temporal.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = "f",
target_type = col_factor(levels = c(
"dry_grassland", "hay_meadow"
)),
seed_density = "f",
exposition = col_factor(levels = c(
"north", "south"
)),
survey_year = "c"
)
) %>%
### Exclude data of seed mixtures
filter(presabu == "presence") %>%
mutate(
survey_year_fct = factor(survey_year),
id = factor(id),
n = persistence
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, n
)
### Packages ###
library(here)
library(tidyverse)
library(ggbeeswarm)
library(ggrepel)
### Start ###
rm(list = setdiff(ls(), c("graph_a", "graph_b", "graph_c", "graph_d")))
### Load data ###
sites <- read_csv(
here("data", "processed", "data_processed_sites.csv"),
col_names = TRUE, na = c("na", "NA", ""), col_types =
cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = col_factor(levels = c("hay_meadow", "dry_grassland")),
seed_density = "f",
exposition = col_factor(levels = c("north", "south")),
survey_year = "c"
)
) %>%
### Exclude data of seed mixtures
filter(survey_year != "seeded") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, exposition, sep = " "),
botanist_year = factor(botanist_year),
n = fcs_target,
id = factor(id)
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
### Load data ###
sites <- read_csv(
here("data", "processed", "data_processed_sites_temporal.csv"),
col_names = TRUE, na = c("na", "NA", ""),
col_types = cols(
.default = "?",
plot = "f",
site = "f",
sand_ratio = "f",
substrate_depth = col_factor(levels = c("30", "15")),
target_type = col_factor(levels = c("hay_meadow", "dry_grassland")),
seed_density = "f",
exposition = col_factor(levels = c("north", "south")),
survey_year = "c"
)
) %>%
### Exclude data of seed mixtures
filter(presabu == "presence") %>%
mutate(
survey_year_fct = factor(survey_year),
botanist_year = str_c(survey_year, botanist, exposition, sep = " "),
botanist_year = factor(botanist_year),
id = factor(id),
n = persistence / 100
) %>%
select(
id, plot, site, exposition, sand_ratio, substrate_depth, target_type,
seed_density, survey_year_fct, survey_year, botanist_year, n
)
### * Model ####
load(file = here("outputs", "models", "model_persistence_2.Rdata"))
model <- sites %>%
add_epred_draws(m2, allow_new_levels = TRUE)
model <- sites %>%
tidybayes::add_epred_draws(m2, allow_new_levels = TRUE)
### * Functions ####
theme_mb <- function() {
theme(
panel.background = element_rect(fill = "white"),
text = element_text(size = 9, color = "black"),
strip.text = element_text(size = 10),
axis.text = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.title = element_text(angle = 0, hjust = 0.5, size = 9,
color = "black"),
axis.line = element_line(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 9),
legend.position = "right",
legend.margin = margin(0, 0, 0, 0, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm")
)
}
(p1 <- ggplot(data = sites) +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
alpha = 0.2,
dodge.width = 0.9,
cex = .5
) +
geom_hline(
yintercept = c(25, 75),
linetype = "dashed",
linewidth = .3,
color = "black"
) +
geom_hline(
yintercept = c(50),
linetype = "solid",
linewidth = .3,
color = "black"
) +
stat_pointinterval(
aes(y = .epred, x = sand_ratio, color = target_type),
data = model,
.width = c(0.66, 0.95),
point_size = 2,
position = "dodge"
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(0, 100), breaks = seq(-100, 400, 10)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression("Persistence [%]")
) +
theme_mb())
(p1 <- ggplot(data = sites) +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
alpha = 0.2,
dodge.width = 0.9,
cex = .5
) +
geom_hline(
yintercept = c(25, 75),
linetype = "dashed",
linewidth = .3,
color = "black"
) +
geom_hline(
yintercept = c(50),
linetype = "solid",
linewidth = .3,
color = "black"
) +
tidybayes::stat_pointinterval(
aes(y = .epred, x = sand_ratio, color = target_type),
data = model,
.width = c(0.66, 0.95),
point_size = 2,
position = "dodge"
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(0, 100), breaks = seq(-100, 400, 10)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression("Persistence [%]")
) +
theme_mb())
lifecycle::last_lifecycle_warnings()
(p1 <- ggplot(data = sites) +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
alpha = 0.2,
dodge.width = 0.9,
cex = .5
) +
geom_hline(
yintercept = c(25, 75),
linetype = "dashed",
linewidth = .3,
color = "black"
) +
geom_hline(
yintercept = c(50),
linetype = "solid",
linewidth = .3,
color = "black"
) +
tidybayes::stat_pointinterval(
aes(y = .epred, x = sand_ratio, color = target_type),
data = model,
.width = c(0.66, 0.95),
point_size = 2,
position = "dodge"
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(-100, 400, .1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression("Persistence [%]")
) +
theme_mb())
(p1 <- ggplot(data = sites) +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
alpha = 0.2,
dodge.width = 0.9,
cex = .5
) +
geom_hline(
yintercept = c(.25, .75),
linetype = "dashed",
linewidth = .3,
color = "black"
) +
geom_hline(
yintercept = c(.50),
linetype = "solid",
linewidth = .3,
color = "black"
) +
tidybayes::stat_pointinterval(
aes(y = .epred, x = sand_ratio, color = target_type),
data = model,
.width = c(0.66, 0.95),
point_size = 2,
position = "dodge"
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(-100, 400, .1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression("Persistence [%]")
) +
theme_mb())
View(model)
(p1 <- ggplot(data = sites) +
geom_quasirandom(
aes(y = n, x = sand_ratio, color = target_type),
alpha = 0.2,
dodge.width = 0.9,
cex = .5
) +
geom_hline(
yintercept = c(.25, .75),
linetype = "dashed",
linewidth = .3,
color = "black"
) +
geom_hline(
yintercept = c(.50),
linetype = "solid",
linewidth = .3,
color = "black"
) +
tidybayes::stat_pointinterval(
aes(y = .epred, x = sand_ratio, color = target_type),
data = model,
.width = c(0.66, 0.95),
point_size = 2,
position = "dodge"
) +
facet_grid(
exposition ~ survey_year_fct,
labeller = as_labeller(
c(south = "South", north = "North",
"2018" = "2018", "2019" = "2019", "2020" = "2020", "2021" = "2021")
)
) +
scale_y_continuous(limits = c(0, 1.02), breaks = seq(-100, 400, .1)) +
scale_color_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
scale_fill_manual(labels = c("Hay meadow", "Dry grassland"),
values = c("#00BFC4", "#F8766D")) +
labs(
x = "Sand ratio [%]", fill = "", color = "",
y = expression("Persistence [%]")
) +
theme_mb())
ggsave(here("outputs", "figures",
"figure_2_persistence_epred_800dpi_24x8cm.tiff"),
dpi = 800, width = 24, height = 8, units = "cm")
p1 + theme(legend.position = "bottom")
ggsave(here("outputs", "figures",
"figure_2_persistence_epred_800dpi_16.5x14cm.tiff"),
dpi = 800, width = 16.5, height = 14, units = "cm")
